---
// 只加载基础的等宽字体，减少加载时间
import "@fontsource-variable/jetbrains-mono";

interface Props {
	class: string;
}
const className = Astro.props.class;
---
<div data-pagefind-body class={`prose dark:prose-invert prose-base !max-w-none custom-md ${className}`}>
    <!--<div class="prose dark:prose-invert max-w-none custom-md">-->
    <!--<div class="max-w-none custom-md">-->
    <slot/>
</div>

<script>
document.addEventListener("click", function (e: MouseEvent) {
    const target = e.target as Element | null;
    if (target && target.classList.contains("copy-btn")) {
        const preEle = target.closest("pre");
        const codeEle = preEle?.querySelector("code");
        
        // 精确的代码提取逻辑
        let code = '';
        if (codeEle) {
            // 获取所有代码行元素
            const lineElements = codeEle.querySelectorAll('span.line');
            if (lineElements.length > 0) {
                // 对于有行结构的代码块，精确处理每一行
                const lines = [];
                for (let i = 0; i < lineElements.length; i++) {
                    const lineElement = lineElements[i];
                    // 直接获取文本内容，不添加额外处理
                    const lineText = lineElement.textContent || '';
                    lines.push(lineText);
                }
                // 重要：使用 \n 连接行，而不是 \n\n 或其他方式
                code = lines.join('\n');
            } else {
                // 对于没有行结构的代码块
                const codeElements = codeEle.querySelectorAll('.code:not(summary *)');
                if (codeElements.length > 0) {
                    const lines = [];
                    for (let i = 0; i < codeElements.length; i++) {
                        const el = codeElements[i];
                        const lineText = el.textContent || '';
                        lines.push(lineText);
                    }
                    code = lines.join('\n');
                } else {
                    // 最后回退到直接使用整个code元素的文本内容
                    code = codeEle.textContent || '';
                }
            }
        }
        
        // 处理连续空行：改进的逻辑
        code = code.replace(/\n\n\n+/g, function(match) {
            // 计算连续换行符的数量
            const newlineCount = match.length;
            // 计算空行数量（换行符数量减1）
            const emptyLineCount = newlineCount - 1;
            
            // 偶数空行：除以2
            // 奇数空行：(空行数+1)/2 向下取整
            let resultEmptyLines;
            if (emptyLineCount % 2 === 0) {
                // 偶数
                resultEmptyLines = emptyLineCount / 2;
            } else {
                // 奇数
                resultEmptyLines = Math.floor((emptyLineCount + 1) / 2);
            }
            
            // 至少保留一个空行
            if (resultEmptyLines < 1) resultEmptyLines = 1;
            
            // 返回对应数量的换行符
            return '\n'.repeat(resultEmptyLines + 1);
        });
        
        // 尝试多种复制方法
        const copyToClipboard = async (text: string) => {
            try {
                // 优先使用 Clipboard API
                await navigator.clipboard.writeText(text);
            } catch (clipboardErr) {
                console.warn('Clipboard API 失败，尝试备用方案:', clipboardErr);
                
                // 备用方案：使用 document.execCommand
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                try {
                    const successful = document.execCommand('copy');
                    if (!successful) {
                        throw new Error('execCommand 返回 false');
                    }
                } catch (execErr) {
                    console.error('execCommand 也失败了:', execErr);
                    throw new Error('所有复制方法都失败了');
                } finally {
                    document.body.removeChild(textArea);
                }
            }
        };
        
        copyToClipboard(code).then(() => {
            const timeoutId = target.getAttribute("data-timeout-id");
            if (timeoutId) {
                clearTimeout(parseInt(timeoutId));
            }

            target.classList.add("success");

            // 设置新的timeout并保存ID到按钮的自定义属性中
            const newTimeoutId = setTimeout(() => {
                target.classList.remove("success");
            }, 1000);

            target.setAttribute("data-timeout-id", newTimeoutId.toString());
        }).catch(err => {
            console.error('复制失败:', err);
            // 可以在这里添加用户提示
        });
    }
});
</script>
