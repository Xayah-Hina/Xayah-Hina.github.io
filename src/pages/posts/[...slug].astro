---
import path from "node:path";
import Comment from "@components/comment/index.astro";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import PasswordProtection from "@components/PasswordProtection.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import bcryptjs from "bcryptjs";
import CryptoJS from "crypto-js";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";
export async function getStaticPaths() {
	const blogEntries = await getSortedPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const { remarkPluginFrontmatter } = await entry.render();

// 处理加密逻辑
let encryptedContent = "";
let passwordHash = "";
let isEncrypted = entry.data.encrypted && entry.data.password;

if (isEncrypted) {
	// 对于加密文章，我们将使用内容进行加密
	// 在客户端解密后，会通过JavaScript重新渲染
	const contentToEncrypt = entry.body;

	// 使用AES加密内容
	encryptedContent = CryptoJS.AES.encrypt(
		contentToEncrypt,
		entry.data.password,
	).toString();

	// 生成密码哈希
	const saltRounds = 10;
	passwordHash = bcryptjs.hashSync(entry.data.password, saltRounds);
}

dayjs.extend(utc);
const lastModified = dayjs(entry.data.updated || entry.data.published)
	.utc()
	.format("YYYY-MM-DDTHH:mm:ss");

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	keywords: entry.data.tags,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: entry.data.lang
		? entry.data.lang.replace("_", "-")
		: siteConfig.lang.replace("_", "-"),
	// TODO include cover image here
};
---

<MainGridLayout
    banner={entry.data.image}
    title={entry.data.title}
    description={entry.data.description}
    lang={entry.data.lang}
    setOGTypeArticle={true}
    postSlug={entry.slug}
    headings={headings}
>
    <script
        is:inline
        slot="head"
        type="application/ld+json"
        set:html={JSON.stringify(jsonLd)}
    />
    <div
        class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4"
    >
        <div
            id="post-container"
            class:list={[
                "card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
                {},
            ]}
        >
            <!-- word count and reading time -->
            <div
                class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation"
            >
                <div class="flex flex-row items-center">
                    <div
                        class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2"
                    >
                        <Icon name="material-symbols:notes-rounded" />
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.words}
                        {" " + i18n(I18nKey.wordsCount)}
                    </div>
                </div>
                <div class="flex flex-row items-center">
                    <div
                        class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2"
                    >
                        <Icon
                            name="material-symbols:schedule-outline-rounded"
                        />
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes}
                        {
                            " " +
                                i18n(
                                    remarkPluginFrontmatter.minutes === 1
                                        ? I18nKey.minuteCount
                                        : I18nKey.minutesCount,
                                )
                        }
                    </div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body
                    data-pagefind-weight="10"
                    data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]"
                >
                    {entry.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                    class="mb-5"
                    published={entry.data.published}
                    updated={entry.data.updated}
                    tags={entry.data.tags}
                    category={entry.data.category}
                    slug={entry.slug}
                />
                {
                    !entry.data.image && (
                        <div class="mt-4 border-[var(--line-divider)] border-dashed border-b-[1px] mb-5" />
                    )
                }
            </div>

            <!-- always show cover as long as it has one -->

            {
                entry.data.image && (
                    <>
                        <div class="mt-4" />
                        <ImageWrapper
                            id="post-cover"
                            src={entry.data.image}
                            basePath={path.join("content/posts/", getDir(entry.id))}
                            class="mb-8 rounded-xl banner-container onload-animation"
                        />
                    </>
                )
            }

            {
                isEncrypted ? (
                    <PasswordProtection
                        encryptedContent={encryptedContent}
                        passwordHash={passwordHash}
                    />
                ) : (
                    <>
                        <Markdown class="mb-6 markdown-content onload-animation">
                            <Content />
                        </Markdown>
                        {licenseConfig.enable && (
                            <License
                                title={entry.data.title}
                                slug={entry.slug}
                                pubDate={entry.data.published}
                                author={entry.data.author}
                                sourceLink={entry.data.sourceLink}
                                licenseName={entry.data.licenseName}
                                licenseUrl={entry.data.licenseUrl}
                                class="mb-6 rounded-xl license-container onload-animation"
                            />
                        )}
                    </>
                )
            }
        </div>
    </div>

    <!-- 评论 -->
    <Comment post={entry} />

    {siteConfig.showLastModified && (
        <>
            <div 
                id="last-modified" 
                data-last-modified={lastModified}
                data-prefix={i18n(I18nKey.lastModifiedPrefix)}
                data-year={i18n(I18nKey.year)}
                data-month={i18n(I18nKey.month)}
                data-day={i18n(I18nKey.day)}
                data-hour={i18n(I18nKey.hour)}
                data-minute={i18n(I18nKey.minute)}
                data-second={i18n(I18nKey.second)}
                style="display: none;"
            ></div>

            <div class="card-base p-6 mb-4">
                <script is:inline>
                    function runtime() {
                        const lastModifiedElement = document.getElementById('last-modified');
                        const startDate = new Date(lastModifiedElement.dataset.lastModified);
                        const currentDate = new Date();
                        const diff = currentDate - startDate;

                        const seconds = Math.floor(diff / 1000);
                        const days = Math.floor(seconds / 86400);
                        const hours = Math.floor((seconds % 86400) / 3600);
                        const minutes = Math.floor((seconds % 3600) / 60);
                        const secs = seconds % 60;

                        const years = Math.floor(days / 365);
                        const months = Math.floor((days % 365) / 30);
                        const remainingDays = days % 30;

                        const prefix = lastModifiedElement.dataset.prefix;
                        const yearKey = lastModifiedElement.dataset.year;
                        const monthKey = lastModifiedElement.dataset.month;
                        const dayKey = lastModifiedElement.dataset.day;
                        const hourKey = lastModifiedElement.dataset.hour;
                        const minuteKey = lastModifiedElement.dataset.minute;
                        const secondKey = lastModifiedElement.dataset.second;

                        let runtimeString = prefix + ' ';
                        
                        if (years > 0) {
                            runtimeString += `${years} ${yearKey} `;
                        }
                        if (months > 0) {
                            runtimeString += `${months} ${monthKey} `;
                        }
                        if (remainingDays > 0) {
                            runtimeString += `${remainingDays} ${dayKey} `;
                        }
                        runtimeString += `${hours} ${hourKey} `;
                        if (minutes < 10) {
                            runtimeString += `0${minutes} ${minuteKey} `;
                        } else {
                            runtimeString += `${minutes} ${minuteKey} `;
                        }
                        if (secs < 10) {
                            runtimeString += `0${secs} ${secondKey}`;
                        } else {
                            runtimeString += `${secs} ${secondKey}`;
                        }

                        document.getElementById("modifiedtime").innerHTML = runtimeString;
                    }
                    setInterval(runtime, 1000);
                </script>
                <div class="card-base p-1 mb-0.1">
                    <div class="flex items-center gap-2">
                        <div class="transition h-9 w-9 rounded-lg overflow-hidden relative flex items-center justify-center mr-0">
                            <Icon
                                name="material-symbols:history-rounded"
                                class="text-4xl text-[var(--primary)] transition-transform group-hover:translate-x-0.5 bg-[var(--enter-btn-bg)] p-2 rounded-md"
                            />
                        </div>
                       
                        <div class="flex flex-col gap-0.1">
                            <div id="modifiedtime" class="text-[1.0rem] leading-tight text-black/75 dark:text-white/75"></div>
                            <p class="text-[0.8rem] leading-tight text-black/75 dark:text-white/75">
                                {i18n(I18nKey.lastModifiedOutdated)}
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )}

    <div
        class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full"
    >
        <a
            href={entry.data.nextSlug
                ? getPostUrlBySlug(entry.data.nextSlug)
                : "#"}
            class:list={[
                "w-full font-bold overflow-hidden active:scale-95",
                { "pointer-events-none": !entry.data.nextSlug },
            ]}
        >
            {
                entry.data.nextSlug && (
                    <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4">
                        <Icon
                            name="material-symbols:chevron-left-rounded"
                            class="text-[2rem] text-[var(--primary)]"
                        />
                        <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                            {entry.data.nextTitle}
                        </div>
                    </div>
                )
            }
        </a>

        <a
            href={entry.data.prevSlug
                ? getPostUrlBySlug(entry.data.prevSlug)
                : "#"}
            class:list={[
                "w-full font-bold overflow-hidden active:scale-95",
                { "pointer-events-none": !entry.data.prevSlug },
            ]}
        >
            {
                entry.data.prevSlug && (
                    <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                        <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                            {entry.data.prevTitle}
                        </div>
                        <Icon
                            name="material-symbols:chevron-right-rounded"
                            class="text-[2rem] text-[var(--primary)]"
                        />
                    </div>
                )
            }
        </a>
    </div>
</MainGridLayout>
